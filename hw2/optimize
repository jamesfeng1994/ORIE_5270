from scipy import optimize
import time
import numpy as np

def rosenbrock(x):
    """
    The rosenbrock function with dimension of 3
    :param x: array, representing the inpute vector (x1, x2, x3)
    :return: float, the function value
    """
    return np.sum(100 * np.square(x[1:] - x[:-1])) + (x[0] - 1)**2

def gradient(x):
    """
    The gradient function of rosenbrock function with dimentison of 3
    :param x: array, representing the inpute vector (x1, x2, x3)
    :return: float, the gradient value
    """
    return np.array([-400 * x[0] * x[1] + 400 * x[0] ** 3 - 2 * (1 - x[0]),
                     -400 * x[1] * x[2] + 400 * x[1] ** 3 - 2 * (1 - x[1]) + 200 * (x[1] - x[0] ** 2),
                     200 * (x[2] - x[1] ** 2)])

def rosenbrock_optimize(x):
    """
    The minimum value of a rosenbrock function with dimension of 3 by using method 'BFGS'
    :param x: array, representing the inpute vector (x1, x2, x3)
    :return: float, the optimized minimum function value
    """
    return (optimize.minimize(rosenbrock, x, method='BFGS', jac=gradient).fun,
           optimize.minimize(rosenbrock, x, method='BFGS', jac=gradient).x)

initial_values = np.random.randint(low=-5, high=10, size=(1000, 3))
function_values = []
best_x_list = []
start = time.time()
for x in initial_values:
    function_values.append(rosenbrock_optimize(x)[0])
    best_x_list.append(rosenbrock_optimize(x)[1])
min_value = np.min(function_values)
best_x = best_x_list[np.argwhere(function_values == min_value)[0][0]]
end = time.time()
print(min_value, best_x)
print(end - start)